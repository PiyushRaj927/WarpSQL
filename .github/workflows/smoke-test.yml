name: Smoke Test Docker Image

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
on:
  pull_request:
  push:
    branches:
      - main

env:
  ORG: timescaledev
  TS_VERSION: main
  PLATFORM: linux/amd64

jobs:
  smoketest:
    name: PG${{ matrix.pg }}-${{ matrix.type }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pg: [15]
        # type: ['normal', 'bitnami']
        type: ['bitnami']
    permissions:
      pull-requests: write
    steps:
      - name: Check out the source
        uses: actions/checkout@v3

      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2

      - name: Build Docker Image for TimescaleDB
        run: |
          if [ ${{ matrix.type }} == bitnami ]
          then
            cd bitnami
          fi
          make build-docker-cache image PG_VER=pg${{ matrix.pg }} TAG_VERSION=smoketest-image BETA=1

      - name: Install psql
        run: sudo apt install postgresql-client

      - name: Run the smoke test
        run: |
          set -eu
          export PGHOST=localhost
          export PGUSER=postgres
          export PGPASSWORD=test1234
          docker container stop smoketest-container || true
          docker container rm smoketest-container || true
          docker run -d -p 5432:5432 -e POSTGRES_PASSWORD=${PGPASSWORD} --name smoketest-container smoketest-image
          for _ in {1..120}
          do
            if [ -z "$(docker container ls -q --filter name=smoketest-container)" ]
            then
              echo "Smoketest container is not running"
              exit 1
            fi
            if psql -c "select 1"
            then
            bash ./test/smoke_test/smoke_test.sh
              break
            fi
            sleep 1
          done
          if ! psql -c "select 1"
          then
            echo "Cannot connect to PostgreSQL"
            exit 1
          fi

      - name: Show the logs
        if: always()
        run: |
          docker logs smoketest-container
      - name: comment the image size
        uses: actions/github-script@v6.4.1
        with:
          script: |
            function parseDiveOutput(imageAnalysis) {
              //remove ansi codes
              let cleanText = imageAnalysis.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
              let inefficientFilesSection = false;
              let resultSection = false;
                            const tableHeader = 'Count|Wasted Space|File Path\n--|--|--';
            let efficiency,wastedBytes,userWastedPercent;
            let tableRows =[];
              for (const line of cleanText.split('\n')) {
                if (line.includes('efficiency')) {
                  efficiency = line.split(':')[1].trim()||'undefiened';
                } else if (line.includes('wastedBytes:')) {
                  wastedBytes = line.split(':')[1].trim() ||'undefiened';
                } else if (line.includes('userWastedPercent:')) {
                userWastedPercent = line.split(':')[1].trim() ||'undefiened';
                }else if (line.includes('Inefficient Files:')) {
                inefficientFilesSection = true;
                } else if (inefficientFilesSection) {
                  if (! line.startsWith('Count')) {
                    tableRows.push(
                      `| ${line.slice(0, 5)} | ${line.slice(7, 19)} | ${line.slice(21)} |`
                    )}}}
                const detailsTable = [tableHeader, ...tableRows.slice(10)].join('\n');
                        
                const mostInefficientFiles = [tableHeader, ...tableRows.slice(0, 10)].join('\n');
                
              // const output = +`efficiency: ${efficiency}\n`
              //               + `wastedBytes: ${wastedBytes}\n`
              //               + `userWastedPercent: ${userWastedPercent}\n`
              //               + 'the below should be in a markdown table\n'
              //               + 'Inefficient Files:\n\n'
              //               +  detailsTable
              //               + '\n\n<details>\n'
              //               + '            <summary>dive analysis </summary>\n\n'
              //               + markdownTable
              //               + '\n\n<details>\n';
                      
                        
                return [efficiency,wastedBytes,userWastedPercent,mostInefficientFiles,detailsTable];
            }
            async function captureExecOutput(command,arguments){
            let myOutput = '';
            let myError = '';

            const options = {};
            options.listeners = {
              stdout: (data) => {
                myOutput += data.toString();
              },
              stderr: (data) => {
                myError += data.toString();
              }
            };
            await exec.exec(command,arguments,options);
            console.log(myOutput);
            return myOutput;
            }
            let commitSHA = context.sha;
            let imageSize = await captureExecOutput('docker', ['image', 'list', '--format','{{.Size}}','smoketest-image']);
            // let imageLayers = await captureExecOutput('docker', ['image', 'history' ,'-H'  ,'--format','table {{.CreatedBy}} \\t\\t {{.Size}}' ,'smoketest-image']);
            let diveAnalysis = await captureExecOutput('docker', ['run', '--rm','-e', 'CI=true','-v','${{ github.workspace }}/.dive-ci:/tmp/.dive-ci','-v',
            '/var/run/docker.sock:/var/run/docker.sock', 'wagoodman/dive:latest','--ci-config','/tmp/.dive-ci','smoketest-image']);
            console.log(commitSHA);
            console.log(imageSize);
            // console.log(imageLayers);
            // console.log(diveAnalysis);
            // remove the ANSI color codes
            let [efficiency,wastedBytes,userWastedPercent,mostInefficientFiles,detailsTable]  = parseDiveOutput(diveAnalysis);
            let githubMessage = `# ${{ matrix.type }} image analysis based on ${commitSHA}
            ## Summary
            \`Total Size\`:  ${imageSize}
            \`Efficiency\`: ${efficiency}
            \`wastedBytes\`: ${wastedBytes}
            \`userWastedPercent\`: ${userWastedPercent}

            ----------------------------------------------------------
            ## Inefficient Files:
            ${mostInefficientFiles}

            <details>

            <summary>Full output </summary>

            ${detailsTable}

            </details>
              `;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: githubMessage
              });
# TODO: add dive config file
# TODO: add a seperate script
# TODO: add artifact uoload 
# TODO: mark old messages as outdated