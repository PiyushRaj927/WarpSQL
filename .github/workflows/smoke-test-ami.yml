name: Smoke Test ami Image

concurrency:
  group: ${{ github.workflow }}-${{github.ref}}
  cancel-in-progress: true

on:
  pull_request:
  push:
    branches:
      - main
defaults:
  run:
    shell: bash
env:
  AWS_REGION: "us-east-1"
  TERRAFORM_DIRECTORY: ${{github.workspace}}/terraform

jobs:
  smoketest-ami:
    name: PG${{ matrix.pg }}-${{ matrix.type }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write # required for aws credentials
    strategy:
      fail-fast: false
      matrix:
        pg: [15]
        type: ["alpine"]
    steps:
      - name: Check out the source
        uses: actions/checkout@v3


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          role-to-assume: arn:aws:iam::052187009926:role/Github-Warpsql-Action
          role-session-name: ${{github.run_id}}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "latest"

      # build the packer image
      - name: Build the image
        run: |
          cd packer && packer init .
          packer build  -only="warpsql.amazon-ebs.${{matrix.type}}" -var ami_name="warpsql-${{matrix.type}}-${{github.ref}}-${{github.run_id}}" -var extensions="timescaledb,pgvector,postgis,pg_repack,pgautofailover,hll,citus"  warpsql.pkr.hcl
          echo "WARPSQL_AMI_ID=$(cat warpsql-ami.json | jq -r '.builds[0].artifact_id' |cut -d':' -f2)" >> $GITHUB_ENV
        env:
          PACKER_LOG: 1
          PACKER_GITHUB_API_TOKEN: ${{github.token}}

      # check and run the terraform
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform fmt
        run: terraform fmt -check
        working-directory: ${{env.TERRAFORM_DIRECTORY}}
      - name: Terraform Init
        run: terraform init
        working-directory: ${{env.TERRAFORM_DIRECTORY}}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{env.TERRAFORM_DIRECTORY}}

      - name: Terraform Apply
        run: terraform apply -var ami_id=${{env.WARPSQL_AMI_ID}} -auto-approve
        working-directory: ${{env.TERRAFORM_DIRECTORY}}

      
      - name: Save the instance ip
        run: echo "PGHOST=$(terraform output -raw public_ip)" >> $GITHUB_ENV
        working-directory: ${{env.TERRAFORM_DIRECTORY}}
      - name: Install psql
        run: sudo apt install -y postgresql-client

      - name: Run the smoke test
        env:
          PGPORT: "5432"
          PGUSER: "postgres"
          PGHOST: ${{env.PGHOST}}
          PGPASSWORD: "warpsql" 
        run: |
          env
          set -eu
          for _ in {1..300}
          do
            if psql -c "select 1"
            then
            bash ./test/smoke_test/smoke_test.sh
              break
            fi
            sleep 1
          done
          if ! psql -c "select 1"
          then
            echo "Cannot connect to PostgreSQL"
            exit 1
          fi

      - name: Destroy infra
        if: ${{ always() }}
        run: |
          # Destroy the instance
          terraform destroy -auto-approve -var ami_id=${{env.WARPSQL_AMI_ID}} 
        working-directory: ${{env.TERRAFORM_DIRECTORY}}

      - name: Destroy AMI and Snapshot
        if: ${{ always() }}
        run: |
          # Destroy the ami and snapshot
          snapshots="$(aws ec2 describe-images --image-ids ${{env.WARPSQL_AMI_ID}} --query 'Images[*].BlockDeviceMappings[*].Ebs.SnapshotId' --output text)"
          echo "Deregistering AMI ${{env.WARPSQL_AMI_ID}}"
          aws ec2 deregister-image --image-id ${{env.WARPSQL_AMI_ID}}
          for snapshot in $snapshots
          do 
            aws ec2 delete-snapshot --snapshot-id $snapshot
            echo "Deleted $snapshot"
          done
        working-directory: ${{env.TERRAFORM_DIRECTORY}}
